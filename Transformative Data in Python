# import Lib
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import pandas as pd # for data proccecing and analysis
import numpy as np # for linear algebra
import matplotlib.pyplot as plt #for data visualization
import seaborn as sns
# importing the dataset
df = pd.read_csv('insurance.csv')

#the first 5 rows
df.head()
# the shape and the size of the dataset
print(f"shape : {df.shape}")
print(f"size  : {df.size}")
#data types and null elements
df.info()
# basic stats
df.describe()
sns.scatterplot(data=df,x='BMI',y='Medical Insurance Charges',hue='Smoker')
plt.title('Distribution of Medical Insurance Charges based on BMI and Smoker state')
plt.show()
sns.lineplot(data=df,x='Children',y='Medical Insurance Charges')
plt.title('Variation of Medical Insurance Charges depending on Children')
plt.show()

# Define the age groups
bins = [18, 27, 37, 47, 57]
labels = ['18-27', '28-37', '38-47', '48-57']

# Create a new column 'Age Group' with the age groups
df['Age Group'] = pd.cut(df['Age'], bins=bins, labels=labels, right=False)

# Assign unique colors to each age group
colors = ['blue', 'green', 'red', 'orange']

# Plot the data for each age group with different colors
for i, group in enumerate(labels):
    group_data = df[df['Age Group'] == group]
    plt.scatter(group_data['Age'], group_data['Medical Insurance Charges'], color=colors[i], label=group)

# Fit the model
x = df['Age'].values
y = df['Medical Insurance Charges'].values
Age_model= LinearRegression()
Age_model.fit(x.reshape(-1, 1), y)

# Generate predictions
x_pred = np.linspace(min(x), max(x), 100)
y_pred = Age_model.predict(x_pred.reshape(-1, 1))

# Plot the model's prediction
plt.plot(x_pred, y_pred, color='black', label='Model')

# Set labels and legend
plt.xlabel('Age')
plt.ylabel('Medical Insurance Charges')
plt.title('A Scatter pot of Age and Medical Insurance Charges')
plt.legend()


# Generate predictions
y_pred = Age_model.predict(x.reshape(-1, 1))
plt.show()

# data selection
# Split the data into X (independent variables) and y (dependent variable)
X = df.drop('Smoker', axis=1)  # Assuming 'Smoker' is the target variable
y = df['Smoker']
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create an instance of the logistic regression model
logreg = LogisticRegression()
# Fit the model to the training data
logreg.fit(X_train, y_train)
# Make predictions on the test data
y_pred = logreg.predict(X_test)
#Calculate the accuracy score
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')
#Access the coefficients
coefficients = logreg.coef_
print(f'Coefficients: {coefficients}')
